generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  REQUIRES_PAYMENT_METHOD
  REQUIRES_CONFIRMATION
  CANCELED
  PAID
  FAILED
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
  cart      Cart?
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  price       Decimal    @db.Decimal(10,2)
  currency    String     @default("usd")
  stock       Int        @default(0)
  imageUrl    String?
  active      Boolean    @default(true)
  categoryId  Int?
  category    Category?  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int      @default(1)

  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  @@unique([cartId, productId])
}

model Order {
  id                   Int          @id @default(autoincrement())
  userId               Int
  status               OrderStatus  @default(PENDING)
  totalAmount          Decimal      @db.Decimal(10,2)
  currency             String       @default("usd")
  stripePaymentIntentId String?     @unique
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  items      OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  title     String
  price     Decimal  @db.Decimal(10,2)
  quantity  Int      @default(1)

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}
